// Generated by gencpp from file multi_launch/SetInt32Request.msg
// DO NOT EDIT!


#ifndef MULTI_LAUNCH_MESSAGE_SETINT32REQUEST_H
#define MULTI_LAUNCH_MESSAGE_SETINT32REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_launch
{
template <class ContainerAllocator>
struct SetInt32Request_
{
  typedef SetInt32Request_<ContainerAllocator> Type;

  SetInt32Request_()
    : data(0)  {
    }
  SetInt32Request_(const ContainerAllocator& _alloc)
    : data(0)  {
  (void)_alloc;
    }



   typedef int32_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::multi_launch::SetInt32Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_launch::SetInt32Request_<ContainerAllocator> const> ConstPtr;

}; // struct SetInt32Request_

typedef ::multi_launch::SetInt32Request_<std::allocator<void> > SetInt32Request;

typedef boost::shared_ptr< ::multi_launch::SetInt32Request > SetInt32RequestPtr;
typedef boost::shared_ptr< ::multi_launch::SetInt32Request const> SetInt32RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_launch::SetInt32Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_launch::SetInt32Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_launch::SetInt32Request_<ContainerAllocator1> & lhs, const ::multi_launch::SetInt32Request_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_launch::SetInt32Request_<ContainerAllocator1> & lhs, const ::multi_launch::SetInt32Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_launch

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multi_launch::SetInt32Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_launch::SetInt32Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_launch::SetInt32Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_launch::SetInt32Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_launch::SetInt32Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_launch::SetInt32Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_launch::SetInt32Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da5909fbe378aeaf85e547e830cc1bb7";
  }

  static const char* value(const ::multi_launch::SetInt32Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda5909fbe378aeafULL;
  static const uint64_t static_value2 = 0x85e547e830cc1bb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_launch::SetInt32Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_launch/SetInt32Request";
  }

  static const char* value(const ::multi_launch::SetInt32Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_launch::SetInt32Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 data\n"
;
  }

  static const char* value(const ::multi_launch::SetInt32Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_launch::SetInt32Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetInt32Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_launch::SetInt32Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_launch::SetInt32Request_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_LAUNCH_MESSAGE_SETINT32REQUEST_H
