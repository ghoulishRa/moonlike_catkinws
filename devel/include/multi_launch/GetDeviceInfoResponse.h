// Generated by gencpp from file multi_launch/GetDeviceInfoResponse.msg
// DO NOT EDIT!


#ifndef MULTI_LAUNCH_MESSAGE_GETDEVICEINFORESPONSE_H
#define MULTI_LAUNCH_MESSAGE_GETDEVICEINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <multi_launch/DeviceInfo.h>

namespace multi_launch
{
template <class ContainerAllocator>
struct GetDeviceInfoResponse_
{
  typedef GetDeviceInfoResponse_<ContainerAllocator> Type;

  GetDeviceInfoResponse_()
    : info()
    , success(false)
    , message()  {
    }
  GetDeviceInfoResponse_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::multi_launch::DeviceInfo_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDeviceInfoResponse_

typedef ::multi_launch::GetDeviceInfoResponse_<std::allocator<void> > GetDeviceInfoResponse;

typedef boost::shared_ptr< ::multi_launch::GetDeviceInfoResponse > GetDeviceInfoResponsePtr;
typedef boost::shared_ptr< ::multi_launch::GetDeviceInfoResponse const> GetDeviceInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator1> & lhs, const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator1> & lhs, const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_launch

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a172c842ade7825e92d115b1aef6b0d1";
  }

  static const char* value(const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa172c842ade7825eULL;
  static const uint64_t static_value2 = 0x92d115b1aef6b0d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_launch/GetDeviceInfoResponse";
  }

  static const char* value(const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DeviceInfo info\n"
"bool success\n"
"string message\n"
"\n"
"\n"
"================================================================================\n"
"MSG: multi_launch/DeviceInfo\n"
"std_msgs/Header header\n"
"string name\n"
"string serial_number\n"
"string firmware_version\n"
"string supported_min_sdk_version\n"
"string hardware_version\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDeviceInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_launch::GetDeviceInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::multi_launch::DeviceInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_LAUNCH_MESSAGE_GETDEVICEINFORESPONSE_H
