// Generated by gencpp from file multi_orbbec/DeviceInfo.msg
// DO NOT EDIT!


#ifndef MULTI_ORBBEC_MESSAGE_DEVICEINFO_H
#define MULTI_ORBBEC_MESSAGE_DEVICEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace multi_orbbec
{
template <class ContainerAllocator>
struct DeviceInfo_
{
  typedef DeviceInfo_<ContainerAllocator> Type;

  DeviceInfo_()
    : header()
    , name()
    , serial_number()
    , firmware_version()
    , supported_min_sdk_version()
    , hardware_version()  {
    }
  DeviceInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , serial_number(_alloc)
    , firmware_version(_alloc)
    , supported_min_sdk_version(_alloc)
    , hardware_version(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _serial_number_type;
  _serial_number_type serial_number;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _firmware_version_type;
  _firmware_version_type firmware_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _supported_min_sdk_version_type;
  _supported_min_sdk_version_type supported_min_sdk_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hardware_version_type;
  _hardware_version_type hardware_version;





  typedef boost::shared_ptr< ::multi_orbbec::DeviceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_orbbec::DeviceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceInfo_

typedef ::multi_orbbec::DeviceInfo_<std::allocator<void> > DeviceInfo;

typedef boost::shared_ptr< ::multi_orbbec::DeviceInfo > DeviceInfoPtr;
typedef boost::shared_ptr< ::multi_orbbec::DeviceInfo const> DeviceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_orbbec::DeviceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_orbbec::DeviceInfo_<ContainerAllocator1> & lhs, const ::multi_orbbec::DeviceInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.serial_number == rhs.serial_number &&
    lhs.firmware_version == rhs.firmware_version &&
    lhs.supported_min_sdk_version == rhs.supported_min_sdk_version &&
    lhs.hardware_version == rhs.hardware_version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_orbbec::DeviceInfo_<ContainerAllocator1> & lhs, const ::multi_orbbec::DeviceInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_orbbec

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_orbbec::DeviceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_orbbec::DeviceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_orbbec::DeviceInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1888569b0132dc804ac1aacd640af6e8";
  }

  static const char* value(const ::multi_orbbec::DeviceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1888569b0132dc80ULL;
  static const uint64_t static_value2 = 0x4ac1aacd640af6e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_orbbec/DeviceInfo";
  }

  static const char* value(const ::multi_orbbec::DeviceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string name\n"
"string serial_number\n"
"string firmware_version\n"
"string supported_min_sdk_version\n"
"string hardware_version\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::multi_orbbec::DeviceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.serial_number);
      stream.next(m.firmware_version);
      stream.next(m.supported_min_sdk_version);
      stream.next(m.hardware_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_orbbec::DeviceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_orbbec::DeviceInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "serial_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.serial_number);
    s << indent << "firmware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.firmware_version);
    s << indent << "supported_min_sdk_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.supported_min_sdk_version);
    s << indent << "hardware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hardware_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_ORBBEC_MESSAGE_DEVICEINFO_H
